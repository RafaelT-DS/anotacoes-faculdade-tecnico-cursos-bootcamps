git config --list -> mostra todas as configurações do meu GIT.
git remote add origin https://github.com/RafaelT-DS/livro-receitas.git -> cadastrar o repositório remoto.
git remote -v -> irá listar os repositórios remotos cadastrados.
git status -> mostra se há alguma pendência, como falta de commit, por exemplo.

- Resolvendo conflitos

git pull origin master -> quando foi feita alguma alteração no servidor remoto.
merge conflict -> quando há uma alteração na mesma linha tanto no local quando no remoto

- CURSO SQL SERVER - CRIANDO SUAS PRIMEIRAS CONSULTAS

Banco de dados:

Relacionais -> Ex: SQL Server; Oracle; MySQL. São bancos que o sistema precisa de uma confiabilidade muito grande para os dados. Ex: Não se pode ter vendas duplicadas, controle de estoque, etc.

NoSQL -> MongoDB ; Neo4j; Firebase. Melhor perfomance, armazenam grandes quantidades de dados, bigdata, melhores para armazenar vídeos, imagens, geolocalização, links. 

Atomicidade -> Garantir que os dados estão corretos para inseri-los na tabela. Ex: vender um produto somente se tiver um cliente cadastrado ou realizar uma venda somente quando há produtos cadastrados, etc.

Instalação SQL SERVER (é um serviço que fica rodando no sistema operacional).
Instância -> Usa-se para integrar o banco de dados com algum software. Ex: Server=localhost\SQLEXPRESS;Database=master;Trusted_Connection=True;
SSMS -> Ambiente integrado para acessar, configurar, gerenciar, administrar e desenvolver todos os componentes do SQL SERVER.

Criar um banco novo -> CREATE DATABASE NOME_DO_BANCO

Especificar o banco que vai ser trabalhado -> USE NOME_DO_BANCO

INT -> Números inteiros positivos ou negativos.

VARCHAR -> Tamanho variável

CHAR -> Tamanho fixo. Ex: char(10) e colocar apenas uma letra no campo, ex: 'a', irá adicionar 9 espaços a direita, pois o CHAR exige que os 9 espaços estejam preenchidos.

FLOAT -> Aceita casas decimais.

Selecionar a tabela na consulta SQL e apertar ALT+F1, irá mostrar os tipos das colunas, o tamanho, etc.

Exemplo de INSERT -> insert into clientes (codigo, nome, TipoPessoa) values (1, 'Thiago', 'F');. É possível fazer o insert sem o INTO. É possível também realizar o insert sem os campos especificados que estão entre parênteses, ex: insert clientes values (1, 'Thiago', 'F');. Nesse caso, as colunas na tabela precisam estar exatamente nessa ordem, 1 - codigo, 2 - nome e 3 - TipoPessoa. *** O RECOMENDADO É SEMPRE INFORMAR AS COLUNAS, COMO NO PRIMEIRO EXEMPLO ***. 

Exemplo de UPDATE -> update clientes set Codigo = 7, Nome = 'Jose' where TipoPessoa = 'J'

Exemplo de DELETE -> delete from clientes where Codigo in (5,4,3)

AND
V AND F = V
V AND F = F
F AND V = F
F AND F = F

OR
V OR V = V
V OR F = V
F OR V = V
F OR F = F

GETDATE -> é uma função SQL que retorna a data e hora do momento da inserção do dado.

******************************************************

Exemplo de CASE ->
 
select *,
	case 
		when TipoPessoa = 'J' then 'Juridica'
		when TipoPessoa = 'F' then 'Física'
		else 'Pessoa indefinida'
	end + (//esse mais serve tanto para somar valores quanto para concatenar diferentes tipos de strings//) convert(varchar, GETDATE (), 103)
from clientes			

******************************************************

Exemplo de CONVERT -> select *, convert(varchar, DataSolicitacao, 103 (//esse 103 refere-se a formatação brasileira, ou seja, o formato de data e hora será exibido no formato brasileiro por causa desse 103//)
		      from Pedido // irá conventer o campo data para varchar para ser exibido em um sistema, por exemplo.

******************************************************

CHAVE PRIMÁRIA -> Forma de se identificar um registro; tem que ser única para cada registro; gera uma melhor performance na busca pois irá indexar os registros de forma que quando você faça uma busca por ela, ela retorne de uma forma mais rápida. Ex: CPF.
CHAVE ESTRANGEIRA -> Faz a relação de uma tabela com outra tabela. Sempre será uma cópia de uma chave primária, do mesmo tipo.

alter table Clientes add constraint pk_cliente primary key (Codigo) // Alterando a tabela clientes para que o campo Codigo passe a ser a CHAVE PRIMÁRIA.
*Após habilitar a opção de auto incremento, que faz com que a chave primária seja inserida sequencialmente, não se pode mais realizar um insert informando o código, ex: inset clientes values ('1', 'Julio', 'J', getdate ()); // O 1 não se pode mais colocar, pois a partir de agora quem irá definir os códigos dos próximos cadastros é o próprio SQL.

alter table PedidoItem add constraint fk_pedido foreign key (CodigoPedido) references Pedido (Codigo) // alterando a tabela PedidoItem para que o campo CodigoPedido seja a chave estrangeira do campo Codigo da tabela Pedido.
 
******************************************************

AS FASES DE NORMALIZAÇÃO DE DADOS

1 - Não pode haver um conjunto de colunas repetidos. Ex: duas colunas para mostrar que o cliente tem dois telefones, é melhor criar uma tabela chamada telefone, relacionando com a de cliente, assim um cliente poderia ter N telefones sem nenhum problema.

2 - Não pode haver informações duplicadas que dependam da chave primária.

Clientes - Pedido
1	   N	-> Um cliente pode ter vários pedidos. (Relação de 1N). A tabela que possui o N (No caso pedido), carrega a chave da tabela que é 1 (Clientes)
1	   1	-> Um pedido pode ter apenas um cliente.

Pedido - PediItem
1	 N -> Um pedido pode ter N itens.
1 	 1 -> Um item só pode ter um pedido.

Clientes - Produto
1	 N -> Um cliente pode comprar vários produtos.
N	 1 -> Um produto pode ter sido comprado por vários clientes.

*** Nesse caso que há N dos dois lados da relação, é necessário criar uma tabela intermediária. 
Clientes						Produtos
Codigo			ClientesProdutos		Codigo
			CodigoCliente
			CodigoProduto

******************************************************
CRIANDO SEU PRIMEIRO REPOSISÓRIO NO GITHUB PARA COMPARTILHAR SEU PROGRESSO

- Criar um novo repositório no github https://github.com/
- Deixar o repositório como público.
- Adicionar o README, pois ele irá criar um arquivo que é como se fosse a página inicial do repositório onde serão colocadas as considerações iniciais, eventuais anotações, links úteis, coisas relacionadas ao que representa o repositório em questão.
- * Add. gitignone - pode-se colocar quando estamos trabalhando em um projeto em determinada tecnologia para que ele faça com que o git ignore alguns arquivos que não são necessariamente essenciais para versionar 
- Criar um link no github -> [texto](link). Ex: [Sintaxe Básica Markdown](https://www.markdownguide.org/basic-syntax/)
- Toda vez que for feita alguma alteração, é necessário clicar em Commit Changes 7:47
- Para começar a mexer no repositório na máquina local, basta ir em 'code' e copiar o link dele.
- Com o git instalado no computador, basta acessar a pasta local onde estarão os projetos, clicar com o botão direito e ir em GIT BASH HERE.
- Digitar GIT CLONE e a url do repositório. Ex: GIT CLONE https://github.com/RafaelT-DS/dio-desafio-github-primeiro-repositorio.git
